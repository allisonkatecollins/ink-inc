// <auto-generated />
using System;
using InkInc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InkInc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InkInc.Models.Parlor", b =>
                {
                    b.Property<int>("ParlorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("CloseTime")
                        .IsRequired();

                    b.Property<string>("DaysOpen")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OpenTime")
                        .IsRequired();

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("StreetAddress")
                        .IsRequired();

                    b.HasKey("ParlorId");

                    b.ToTable("Parlor");

                    b.HasData(
                        new
                        {
                            ParlorId = 1,
                            City = "Nashville",
                            CloseTime = "6:00 PM",
                            DaysOpen = "Monday - Saturday",
                            Name = "Black Dahlia Studios",
                            OpenTime = "9:00 AM",
                            OwnerId = "07a0291c-4d77-4fbb-a07d-dc7a8293bfbd",
                            PhoneNumber = "(615)-555-5555",
                            State = "Tennessee",
                            StreetAddress = "1200 Forest Ave"
                        },
                        new
                        {
                            ParlorId = 2,
                            City = "Nashville",
                            CloseTime = "8:00 PM",
                            DaysOpen = "Tuesday - Saturday",
                            Name = "Electric Hand",
                            OpenTime = "10:00 AM",
                            OwnerId = "a74919f5-f63c-4ae0-8fc5-f81091d62693",
                            PhoneNumber = "(615)-555-5555",
                            State = "Tennessee",
                            StreetAddress = "300 Rainbow Dr"
                        });
                });

            modelBuilder.Entity("InkInc.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilePath");

                    b.Property<bool>("IsDisplayPhoto");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilePath = "~/images/capybara1.jpg",
                            IsDisplayPhoto = false,
                            UserId = "c3b39194-f2d1-48a4-b17c-10707cf8abb7"
                        },
                        new
                        {
                            Id = 2,
                            FilePath = "~/images/capybara2.jpg",
                            IsDisplayPhoto = false,
                            UserId = "c3b39194-f2d1-48a4-b17c-10707cf8abb7"
                        },
                        new
                        {
                            Id = 3,
                            FilePath = "~/images/jeff1.jpg",
                            IsDisplayPhoto = false,
                            UserId = "07a0291c-4d77-4fbb-a07d-dc7a8293bfbd"
                        },
                        new
                        {
                            Id = 4,
                            FilePath = "~/images/jeff2.jpg",
                            IsDisplayPhoto = false,
                            UserId = "07a0291c-4d77-4fbb-a07d-dc7a8293bfbd"
                        },
                        new
                        {
                            Id = 5,
                            FilePath = "~/images/tenn1.jpg",
                            IsDisplayPhoto = false,
                            UserId = "a74919f5-f63c-4ae0-8fc5-f81091d62693"
                        },
                        new
                        {
                            Id = 6,
                            FilePath = "~/images/tenn2.jpg",
                            IsDisplayPhoto = false,
                            UserId = "a74919f5-f63c-4ae0-8fc5-f81091d62693"
                        },
                        new
                        {
                            Id = 7,
                            FilePath = "~/images/wedding1.jpg",
                            IsDisplayPhoto = false,
                            UserId = "36cef98b-3452-487b-83a7-b92f19a6f3a7"
                        },
                        new
                        {
                            Id = 8,
                            FilePath = "~/images/wedding2.jpg",
                            IsDisplayPhoto = false,
                            UserId = "36cef98b-3452-487b-83a7-b92f19a6f3a7"
                        });
                });

            modelBuilder.Entity("InkInc.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("BaselinePricing");

                    b.Property<string>("Biography");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("InstagramHandle");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("ParlorId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("PricePerHour");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ParlorId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "07a0291c-4d77-4fbb-a07d-dc7a8293bfbd",
                            AccessFailedCount = 0,
                            BaselinePricing = 50,
                            Biography = "I've been a tattoo artist for 10 years. I specialize in portrait pieces, particularly of Jeff Goldblum.",
                            ConcurrencyStamp = "d566400a-e8a8-48a0-93e2-8ddf7208a902",
                            Email = "allisonkatecollins@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Allison",
                            InstagramHandle = "@allisonkatecollins",
                            LastName = "Collins",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALLISONKATECOLLINS@GMAIL.COM",
                            ParlorId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEPoLGxj5fRoc/4ZpKU1chhQP/0Q1uUUnBRTp97fB0Sm/uHfLpyNvq10MKAKt1FkNrg==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 40,
                            SecurityStamp = "aa68f3e8-d75d-4591-b142-c873a1881df7",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "36cef98b-3452-487b-83a7-b92f19a6f3a7",
                            AccessFailedCount = 0,
                            BaselinePricing = 60,
                            Biography = "I am inspired by the energy that bachelorette parties bring to Nashville, so I mostly do wedding themed tattoos.",
                            ConcurrencyStamp = "accbc768-9b42-46a8-960c-44855bacba51",
                            Email = "asiacarter@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Asia",
                            InstagramHandle = "@asiacarter",
                            LastName = "Carter",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASIACARTER@GMAIL.COM",
                            ParlorId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEFxTU+rJPkuXuZk8ARg4L1mgVYHbD6FxHfsnwQSl9h5eagQC22149DCzgICaVkhl8g==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 50,
                            SecurityStamp = "f284677d-b45a-470f-b6fa-e44c47fb8b76",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "c3b39194-f2d1-48a4-b17c-10707cf8abb7",
                            AccessFailedCount = 0,
                            BaselinePricing = 25,
                            Biography = "I specialize in black-and-white tattoos of capybaras.",
                            ConcurrencyStamp = "ed8153ac-aabe-402b-8512-e42cff00391e",
                            Email = "brj@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brittany",
                            InstagramHandle = "@itsbrittany",
                            LastName = "Ramos-Janeway",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRJ@GMAIL.COM",
                            ParlorId = 2,
                            PasswordHash = "AQAAAAEAACcQAAAAEObCdi1Ix7iAAcMa2vTr+4SOJLMm6qI5odhDKRIVn5pjluUTPCPM+k1Dfk0VIpVt5Q==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 50,
                            SecurityStamp = "4cd9f80b-db38-45a9-95b3-ff0b88641d84",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "a74919f5-f63c-4ae0-8fc5-f81091d62693",
                            AccessFailedCount = 0,
                            BaselinePricing = 100,
                            Biography = "I grew up in Nashville and want to keep the Volunteer tradition alive. Ask me about my Rockytop Special.",
                            ConcurrencyStamp = "2ca122d8-a147-41e4-bfc3-6d05032230f8",
                            Email = "maryremo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            InstagramHandle = "@sodajerk",
                            LastName = "Remo",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARYREMO@GMAIL.COM",
                            ParlorId = 2,
                            PasswordHash = "AQAAAAEAACcQAAAAEENufphAxT+UR8yAXJjVkJ3rJsjkl21jMV9UTNOQQSfVvDf5uQCeN4Uk+QZHZetpXg==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 60,
                            SecurityStamp = "e200a405-73d9-4035-b770-504e56008f20",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InkInc.Models.Photo", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("InkInc.Models.User", b =>
                {
                    b.HasOne("InkInc.Models.Parlor", "Parlor")
                        .WithMany("Users")
                        .HasForeignKey("ParlorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
