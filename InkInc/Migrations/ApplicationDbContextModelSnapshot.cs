// <auto-generated />
using System;
using InkInc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InkInc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InkInc.Models.Parlor", b =>
                {
                    b.Property<int>("ParlorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("CloseTime")
                        .IsRequired();

                    b.Property<string>("DaysOpen")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OpenTime")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("StreetAddress")
                        .IsRequired();

                    b.HasKey("ParlorId");

                    b.ToTable("Parlor");

                    b.HasData(
                        new
                        {
                            ParlorId = 1,
                            City = "Atlanta",
                            CloseTime = "6:00 PM",
                            DaysOpen = "Monday - Saturday",
                            Name = "Black Dahlia Studios",
                            OpenTime = "9:00 AM",
                            PhoneNumber = "(615)-555-5555",
                            State = "Georgia",
                            StreetAddress = "1200 Forest Ave"
                        },
                        new
                        {
                            ParlorId = 2,
                            City = "Nashville",
                            CloseTime = "8:00 PM",
                            DaysOpen = "Tuesday - Saturday",
                            Name = "Electric Hand",
                            OpenTime = "10:00 AM",
                            PhoneNumber = "(615)-555-5555",
                            State = "Tennessee",
                            StreetAddress = "300 Rainbow Dr"
                        });
                });

            modelBuilder.Entity("InkInc.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilePath");

                    b.Property<bool>("IsDisplayPhoto");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilePath = "~/images/capybara1.jpg",
                            IsDisplayPhoto = false,
                            UserId = "5661114f-a785-4d5c-8ee8-20eb6366190c"
                        },
                        new
                        {
                            Id = 2,
                            FilePath = "~/images/capybara2.jpg",
                            IsDisplayPhoto = false,
                            UserId = "5661114f-a785-4d5c-8ee8-20eb6366190c"
                        },
                        new
                        {
                            Id = 3,
                            FilePath = "~/images/jeff1.jpg",
                            IsDisplayPhoto = false,
                            UserId = "9eb5a457-17b0-4f58-b76d-6f3448575733"
                        },
                        new
                        {
                            Id = 4,
                            FilePath = "~/images/jeff2.jpg",
                            IsDisplayPhoto = false,
                            UserId = "9eb5a457-17b0-4f58-b76d-6f3448575733"
                        },
                        new
                        {
                            Id = 5,
                            FilePath = "~/images/tenn1.jpg",
                            IsDisplayPhoto = false,
                            UserId = "0402a486-a1f7-4eaf-96ef-66dc25142242"
                        },
                        new
                        {
                            Id = 6,
                            FilePath = "~/images/tenn2.jpg",
                            IsDisplayPhoto = false,
                            UserId = "0402a486-a1f7-4eaf-96ef-66dc25142242"
                        },
                        new
                        {
                            Id = 7,
                            FilePath = "~/images/wedding1.jpg",
                            IsDisplayPhoto = false,
                            UserId = "d5067774-8cf5-44c1-acba-cdf79c125414"
                        },
                        new
                        {
                            Id = 8,
                            FilePath = "~/images/wedding2.jpg",
                            IsDisplayPhoto = false,
                            UserId = "d5067774-8cf5-44c1-acba-cdf79c125414"
                        },
                        new
                        {
                            Id = 9,
                            FilePath = "~/images/jeff3.jpg",
                            IsDisplayPhoto = false,
                            UserId = "9eb5a457-17b0-4f58-b76d-6f3448575733"
                        },
                        new
                        {
                            Id = 10,
                            FilePath = "~/images/jeff4.jpg",
                            IsDisplayPhoto = false,
                            UserId = "9eb5a457-17b0-4f58-b76d-6f3448575733"
                        });
                });

            modelBuilder.Entity("InkInc.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("BaselinePricing");

                    b.Property<string>("Biography")
                        .HasMaxLength(500);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("InstagramHandle");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int?>("ParlorId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("PricePerHour");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ParlorId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "9eb5a457-17b0-4f58-b76d-6f3448575733",
                            AccessFailedCount = 0,
                            BaselinePricing = 50,
                            Biography = "I've been a tattoo artist for 10 years. I specialize in portrait pieces, particularly of Jeff Goldblum.",
                            ConcurrencyStamp = "182192f3-4c66-4c73-b9d9-d1605fb23e2d",
                            Email = "allisonkatecollins@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Allison",
                            InstagramHandle = "@allisonkatecollins",
                            LastName = "Collins",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALLISONKATECOLLINS@GMAIL.COM",
                            NormalizedUserName = "ALLISONKATECOLLINS@GMAIL.COM",
                            ParlorId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEM9RTf0ucc/4Gox8oeJFfdCPcR2yDTXudrs2WBzyolT23fVcAMZKnUYEbYmK/sfXwA==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 80,
                            SecurityStamp = "7749e9db-9f06-47e5-9a7a-08f7d75d6a71",
                            TwoFactorEnabled = false,
                            UserName = "allisonkatecollins@gmail.com"
                        },
                        new
                        {
                            Id = "d5067774-8cf5-44c1-acba-cdf79c125414",
                            AccessFailedCount = 0,
                            BaselinePricing = 60,
                            Biography = "I am inspired by the energy that bachelorette parties bring to Nashville, so I mostly do wedding themed tattoos.",
                            ConcurrencyStamp = "e88d8834-25d0-4e78-9172-01d34fb014f8",
                            Email = "asiacarter@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Asia",
                            InstagramHandle = "@asiacarter",
                            LastName = "Carter",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASIACARTER@GMAIL.COM",
                            NormalizedUserName = "ASIACARTER@GMAIL.COM",
                            ParlorId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEOluouyIA5otG9ORFcfjflzdF4nWrdvO229ZJsQkF+tzU1oiNNQD4qbDLd21rxypYw==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 50,
                            SecurityStamp = "67a7c04f-1f09-4bf5-8f11-07c6160b28e4",
                            TwoFactorEnabled = false,
                            UserName = "asiacarter@gmail.com"
                        },
                        new
                        {
                            Id = "5661114f-a785-4d5c-8ee8-20eb6366190c",
                            AccessFailedCount = 0,
                            BaselinePricing = 25,
                            Biography = "I specialize in black-and-white tattoos of capybaras.",
                            ConcurrencyStamp = "dc5b2a5f-658d-44c5-8ea9-650cf89a2bed",
                            Email = "brj@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brittany",
                            InstagramHandle = "@itsbrittany",
                            LastName = "Ramos-Janeway",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRJ@GMAIL.COM",
                            NormalizedUserName = "BRJ@GMAIL.COM",
                            ParlorId = 2,
                            PasswordHash = "AQAAAAEAACcQAAAAEBHqg/DH4O3ydOfFKgBRobkdc4TKVSGLGdOi6NlFY4tPHajzPQP22KdYvavc9gD7dA==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 50,
                            SecurityStamp = "f0ce7a14-719d-4390-8ddf-0ecf6937ae81",
                            TwoFactorEnabled = false,
                            UserName = "brj@gmail.com"
                        },
                        new
                        {
                            Id = "0402a486-a1f7-4eaf-96ef-66dc25142242",
                            AccessFailedCount = 0,
                            BaselinePricing = 100,
                            Biography = "I grew up in Nashville and want to keep the Volunteer tradition alive. Ask me about my Rockytop Special.",
                            ConcurrencyStamp = "16fe4bb9-b6bf-49e4-89ae-ae9781ba95a4",
                            Email = "maryremo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            InstagramHandle = "@sodajerk",
                            LastName = "Remo",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARYREMO@GMAIL.COM",
                            NormalizedUserName = "MARYREMO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBti2SvSxwycc8QiOz+FiCqgwu0RELqdXbbteZm3aSbHGGLCb5UDtxk4nOk22pFGbg==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 60,
                            SecurityStamp = "fcb926f1-2c5d-4372-8df3-0a9b9c33d7c6",
                            TwoFactorEnabled = false,
                            UserName = "maryremo@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InkInc.Models.Photo", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("InkInc.Models.User", b =>
                {
                    b.HasOne("InkInc.Models.Parlor", "Parlor")
                        .WithMany("Users")
                        .HasForeignKey("ParlorId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
