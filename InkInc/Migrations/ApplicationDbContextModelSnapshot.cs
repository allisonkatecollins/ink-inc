// <auto-generated />
using System;
using InkInc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InkInc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InkInc.Models.Parlor", b =>
                {
                    b.Property<int>("ParlorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("CloseTime")
                        .IsRequired();

                    b.Property<string>("DaysOpen")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OpenTime")
                        .IsRequired();

                    b.Property<string>("PhoneNumber");

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("StreetAddress")
                        .IsRequired();

                    b.HasKey("ParlorId");

                    b.ToTable("Parlor");

                    b.HasData(
                        new
                        {
                            ParlorId = 1,
                            City = "Atlanta",
                            CloseTime = "6:00 PM",
                            DaysOpen = "Monday - Saturday",
                            Name = "Black Dahlia Studios",
                            OpenTime = "9:00 AM",
                            PhoneNumber = "(615)-555-5555",
                            State = "Georgia",
                            StreetAddress = "1200 Forest Ave"
                        },
                        new
                        {
                            ParlorId = 2,
                            City = "Nashville",
                            CloseTime = "8:00 PM",
                            DaysOpen = "Tuesday - Saturday",
                            Name = "Electric Hand",
                            OpenTime = "10:00 AM",
                            PhoneNumber = "(615)-555-5555",
                            State = "Tennessee",
                            StreetAddress = "300 Rainbow Dr"
                        });
                });

            modelBuilder.Entity("InkInc.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilePath");

                    b.Property<string>("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Photo");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            FilePath = "~/images/capybara1.jpg",
                            UserId = "89e69eba-a31c-4966-9755-7fae90033932"
                        },
                        new
                        {
                            Id = 2,
                            FilePath = "~/images/capybara2.jpg",
                            UserId = "89e69eba-a31c-4966-9755-7fae90033932"
                        },
                        new
                        {
                            Id = 3,
                            FilePath = "~/images/jeff1.jpg",
                            UserId = "4f1e7b06-64d1-419d-b34b-909491fa9dfd"
                        },
                        new
                        {
                            Id = 4,
                            FilePath = "~/images/jeff2.jpg",
                            UserId = "4f1e7b06-64d1-419d-b34b-909491fa9dfd"
                        },
                        new
                        {
                            Id = 5,
                            FilePath = "~/images/tenn1.jpg",
                            UserId = "c19dab41-531c-4849-8b9a-5ba86434b3db"
                        },
                        new
                        {
                            Id = 6,
                            FilePath = "~/images/tenn2.jpg",
                            UserId = "c19dab41-531c-4849-8b9a-5ba86434b3db"
                        },
                        new
                        {
                            Id = 7,
                            FilePath = "~/images/wedding1.jpg",
                            UserId = "cf2aceb4-01e7-476a-b758-b536eefb6865"
                        },
                        new
                        {
                            Id = 8,
                            FilePath = "~/images/wedding2.jpg",
                            UserId = "cf2aceb4-01e7-476a-b758-b536eefb6865"
                        },
                        new
                        {
                            Id = 9,
                            FilePath = "~/images/jeff3.jpg",
                            UserId = "4f1e7b06-64d1-419d-b34b-909491fa9dfd"
                        },
                        new
                        {
                            Id = 10,
                            FilePath = "~/images/jeff4.jpg",
                            UserId = "4f1e7b06-64d1-419d-b34b-909491fa9dfd"
                        });
                });

            modelBuilder.Entity("InkInc.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("BaselinePricing");

                    b.Property<string>("Biography")
                        .HasMaxLength(500);

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("InstagramHandle");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int?>("ParlorId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("PricePerHour");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ParlorId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "4f1e7b06-64d1-419d-b34b-909491fa9dfd",
                            AccessFailedCount = 0,
                            BaselinePricing = 50,
                            Biography = "I've been a tattoo artist for 10 years. I specialize in portrait pieces, particularly of Jeff Goldblum.",
                            ConcurrencyStamp = "c7449a4a-c7a7-47fa-9073-9a9d7ff3ef3a",
                            Email = "allisonkatecollins@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Allison",
                            InstagramHandle = "@allisonkatecollins",
                            LastName = "Collins",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALLISONKATECOLLINS@GMAIL.COM",
                            NormalizedUserName = "ALLISONKATECOLLINS@GMAIL.COM",
                            ParlorId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEK5lvkOPFNYkWBq0G1A7WMm6Y5KiBmjDISbAQN0nYlcV7X21ehg/P5lnVscKyNdMvA==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 80,
                            SecurityStamp = "d07f1dc6-b14f-4873-89f5-d897d24f503c",
                            TwoFactorEnabled = false,
                            UserName = "allisonkatecollins@gmail.com"
                        },
                        new
                        {
                            Id = "cf2aceb4-01e7-476a-b758-b536eefb6865",
                            AccessFailedCount = 0,
                            BaselinePricing = 60,
                            Biography = "I am inspired by the energy that bachelorette parties bring to Nashville, so I mostly do wedding themed tattoos.",
                            ConcurrencyStamp = "b37200f4-52fc-4506-84a8-d3d90dde11b9",
                            Email = "asiacarter@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Asia",
                            InstagramHandle = "@asiacarter",
                            LastName = "Carter",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASIACARTER@GMAIL.COM",
                            NormalizedUserName = "ASIACARTER@GMAIL.COM",
                            ParlorId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEInaKdM6JaLLhxOGD/lt6kY+grR0BS68zuI9hEmUBZscX5JwNkK1zewnW65383n4LA==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 50,
                            SecurityStamp = "ae3828b9-1f48-4063-aef3-5c43d781802e",
                            TwoFactorEnabled = false,
                            UserName = "asiacarter@gmail.com"
                        },
                        new
                        {
                            Id = "89e69eba-a31c-4966-9755-7fae90033932",
                            AccessFailedCount = 0,
                            BaselinePricing = 25,
                            Biography = "I specialize in black-and-white tattoos of capybaras.",
                            ConcurrencyStamp = "eec04a6c-5071-4443-94e2-5d9bbeedd1fd",
                            Email = "brj@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brittany",
                            InstagramHandle = "@itsbrittany",
                            LastName = "Ramos-Janeway",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRJ@GMAIL.COM",
                            NormalizedUserName = "BRJ@GMAIL.COM",
                            ParlorId = 2,
                            PasswordHash = "AQAAAAEAACcQAAAAECLZzuS6wlElQo4dJdIL4Hi0cwy7AvhOi3Hd8KcGmpzu5KoKOIUkmNcUJGvw415n4w==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 50,
                            SecurityStamp = "3a395cee-898f-4cd8-9c0e-c3cf4de01345",
                            TwoFactorEnabled = false,
                            UserName = "brj@gmail.com"
                        },
                        new
                        {
                            Id = "c19dab41-531c-4849-8b9a-5ba86434b3db",
                            AccessFailedCount = 0,
                            BaselinePricing = 100,
                            Biography = "I grew up in Nashville and want to keep the Volunteer tradition alive. Ask me about my Rockytop Special.",
                            ConcurrencyStamp = "33f229f4-b2f9-41b0-93dc-8a86b5ba76fe",
                            Email = "maryremo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            InstagramHandle = "@sodajerk",
                            LastName = "Remo",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARYREMO@GMAIL.COM",
                            NormalizedUserName = "MARYREMO@GMAIL.COM",
                            PasswordHash = "AQAAAAEAACcQAAAAEBZ70hb5DcvN98I5YODB64iQgAmZUmC03TEQoHG+X3g/9o4RhsUPHFkfr0CFo4Ot2g==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 60,
                            SecurityStamp = "288654f4-d6a8-44cc-8905-dab2a3b014b2",
                            TwoFactorEnabled = false,
                            UserName = "maryremo@gmail.com"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InkInc.Models.Photo", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("InkInc.Models.User", b =>
                {
                    b.HasOne("InkInc.Models.Parlor", "Parlor")
                        .WithMany("Users")
                        .HasForeignKey("ParlorId");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
