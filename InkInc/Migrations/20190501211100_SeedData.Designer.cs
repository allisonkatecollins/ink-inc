// <auto-generated />
using System;
using InkInc.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace InkInc.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20190501211100_SeedData")]
    partial class SeedData
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.2-servicing-10034")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("InkInc.Models.Parlor", b =>
                {
                    b.Property<int>("ParlorId")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("City")
                        .IsRequired();

                    b.Property<string>("CloseTime")
                        .IsRequired();

                    b.Property<string>("DaysOpen")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<string>("OpenTime")
                        .IsRequired();

                    b.Property<string>("OwnerId")
                        .IsRequired();

                    b.Property<string>("State")
                        .IsRequired();

                    b.Property<string>("StreetAddress")
                        .IsRequired();

                    b.HasKey("ParlorId");

                    b.ToTable("Parlor");

                    b.HasData(
                        new
                        {
                            ParlorId = 1,
                            City = "Nashville",
                            CloseTime = "6:00 PM",
                            DaysOpen = "Monday - Saturday",
                            Name = "Black Dahlia Studios",
                            OpenTime = "9:00 AM",
                            OwnerId = "044549c2-53ed-4010-b33a-6d5e547fdc1b",
                            State = "Tennessee",
                            StreetAddress = "1200 Forest Ave"
                        },
                        new
                        {
                            ParlorId = 2,
                            City = "Nashville",
                            CloseTime = "8:00 PM",
                            DaysOpen = "Tuesday - Saturday",
                            Name = "Electric Hand",
                            OpenTime = "10:00 AM",
                            OwnerId = "80c13867-7a98-490f-be60-c1dc42e4ff11",
                            State = "Tennessee",
                            StreetAddress = "300 Rainbow Dr"
                        });
                });

            modelBuilder.Entity("InkInc.Models.Photo", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("FilePath");

                    b.Property<bool>("IsDisplayPhoto");

                    b.Property<int>("UserId");

                    b.Property<string>("UserId1");

                    b.HasKey("Id");

                    b.HasIndex("UserId1");

                    b.ToTable("Photo");
                });

            modelBuilder.Entity("InkInc.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<int>("BaselinePricing");

                    b.Property<string>("Biography");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<string>("FirstName")
                        .IsRequired();

                    b.Property<string>("InstagramHandle");

                    b.Property<string>("LastName")
                        .IsRequired();

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<int>("ParlorId");

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<int>("PricePerHour");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("ParlorId");

                    b.ToTable("AspNetUsers");

                    b.HasData(
                        new
                        {
                            Id = "044549c2-53ed-4010-b33a-6d5e547fdc1b",
                            AccessFailedCount = 0,
                            BaselinePricing = 50,
                            Biography = "I've been a tattoo artist for 10 years. I specialize in portrait pieces, particularly of Jeff Goldblum.",
                            ConcurrencyStamp = "953fb940-ad8d-4584-9494-32d9ea2271b0",
                            Email = "allisonkatecollins@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Allison",
                            InstagramHandle = "@allisonkatecollins",
                            LastName = "Collins",
                            LockoutEnabled = false,
                            NormalizedEmail = "ALLISONKATECOLLINS@GMAIL.COM",
                            ParlorId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEPo6FsybYFI8+HHPNUbGlLjKLlGAD58ZARdUkCFODXpq5WesL6dzpTHDDI4+zb7vow==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 40,
                            SecurityStamp = "418b87d8-50a4-4a3d-b3fa-790e65c1dc14",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "1e07b7c0-9124-482d-9221-6f82499210e8",
                            AccessFailedCount = 0,
                            BaselinePricing = 60,
                            Biography = "I am inspired by the energy that bachelorette parties bring to Nashville, so I mostly do wedding themed tattoos.",
                            ConcurrencyStamp = "29b65f95-6c7b-451a-bea4-dbb9d7c6d229",
                            Email = "asiacarter@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Asia",
                            InstagramHandle = "@asiacarter",
                            LastName = "Carter",
                            LockoutEnabled = false,
                            NormalizedEmail = "ASIACARTER@GMAIL.COM",
                            ParlorId = 1,
                            PasswordHash = "AQAAAAEAACcQAAAAEBE9gh2NbtbTr9QS0bfaKpUcdAqoum1SM5i7l/SDi9dI+yuXds0oY45aTj/s7/jP0g==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 50,
                            SecurityStamp = "481fd50c-66ca-48d1-b5f8-d132dd0c6e38",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "4fb5bd44-8924-4cf4-ada6-30ebbda6985b",
                            AccessFailedCount = 0,
                            BaselinePricing = 25,
                            Biography = "I specialize in black-and-white tattoos of capybaras.",
                            ConcurrencyStamp = "df32e232-25f4-4ccf-9819-2852862602d0",
                            Email = "brj@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Brittany",
                            InstagramHandle = "@itsbrittany",
                            LastName = "Ramos-Janeway",
                            LockoutEnabled = false,
                            NormalizedEmail = "BRJ@GMAIL.COM",
                            ParlorId = 2,
                            PasswordHash = "AQAAAAEAACcQAAAAEKqC46W/m5Ff7zWngapTe6krE58IgeNnNxnZ0e153/nZHWvQOn/EmW05FHACQhfWdQ==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 50,
                            SecurityStamp = "1dec5e0a-1e75-453e-9757-d81813479c17",
                            TwoFactorEnabled = false
                        },
                        new
                        {
                            Id = "80c13867-7a98-490f-be60-c1dc42e4ff11",
                            AccessFailedCount = 0,
                            BaselinePricing = 100,
                            Biography = "I grew up in Nashville and want to keep the Volunteer tradition alive. Ask me about my Rockytop Special.",
                            ConcurrencyStamp = "7d989da4-69f1-4070-afdb-502f87881376",
                            Email = "maryremo@gmail.com",
                            EmailConfirmed = true,
                            FirstName = "Mary",
                            InstagramHandle = "@sodajerk",
                            LastName = "Remo",
                            LockoutEnabled = false,
                            NormalizedEmail = "MARYREMO@GMAIL.COM",
                            ParlorId = 2,
                            PasswordHash = "AQAAAAEAACcQAAAAEPDNS0z314j9VhMftUKdess+mljLjZ0W2Vowm94UIFzsw9+TL37FBaT+9IAek1t/9A==",
                            PhoneNumberConfirmed = false,
                            PricePerHour = 60,
                            SecurityStamp = "00f2376b-0530-4377-9978-d91b1a0625a0",
                            TwoFactorEnabled = false
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("InkInc.Models.Photo", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany("Photos")
                        .HasForeignKey("UserId1");
                });

            modelBuilder.Entity("InkInc.Models.User", b =>
                {
                    b.HasOne("InkInc.Models.Parlor", "Parlor")
                        .WithMany("Users")
                        .HasForeignKey("ParlorId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("InkInc.Models.User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
